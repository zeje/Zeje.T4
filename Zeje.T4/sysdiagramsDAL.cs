//------------------------------------------------------------------------------
// <auto-generated>
// 自动生成类（请不要随意改变生成文件的内容，会被覆盖，请使用分部类实现对类的修改）
// 创建人：Zeje
// 创建时间：2016-3-28
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Dapper;
using Zeje.DBUtility;
using Zeje.Model;

namespace Zeje.DAL
{
    /// <summary>
    /// </summary>
    public partial class sysdiagramsDAL
    {
        /// <summary>添加对象
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>       
        public int Add(sysdiagrams model)
        {
            StringBuilder query = new StringBuilder();
            query.Append(@"
INSERT INTO sysdiagrams
(
name,
principal_id,
version,
definition
)
VALUES 
(
@name,
@principal_id,
@version,
@definition
)
");
            var args = new DynamicParameters();
            args.Add("@name", model.name);
            args.Add("@principal_id", model.principal_id);
            args.Add("@version", model.version);
            args.Add("@definition", model.definition);
            query.Append(@" SELECT @returnid=SCOPE_IDENTITY() ");
            args.Add("@returnid", dbType: DbType.Int32, direction: ParameterDirection.Output);
            using (DbBase db = new DbBase())
            {
                int rows = db.DbConnecttion.Execute(query.ToString(),args);
                if(rows > 0)
                {
                    model.diagram_id = args.Get<int>("@returnid");
                }
                return rows;
            }
        }

        /// <summary>更新对象
        /// </summary>
        /// <param name="model"></param>
        /// <param name="where"></param>
        /// <returns></returns>       
        public int Update(sysdiagrams model,string where)
        {
            StringBuilder query = new StringBuilder();
            query.Append(@"
UPDATE sysdiagrams SET 
name= @name,
principal_id= @principal_id,
version= @version,
definition= @definition
");
            query.Append(" where " + where );

            using (DbBase db = new DbBase())
            {
                return db.DbConnecttion.Execute(query.ToString(), model);
            }
        }

        /// <summary>删除
        /// </summary>
        /// <param name="where"></param>
        /// <param name="param"></param>
        /// <returns></returns>       
        private int Delete(string where,object param)
        {
            StringBuilder query = new StringBuilder();
            query.Append(@" delete from sysdiagrams ");
            query.Append(" where " + where );

            using (DbBase db = new DbBase())
            {
                return db.DbConnecttion.Execute(query.ToString(), param);
            }
        }

        /// <summary>查询(单个实体)
        /// </summary>
        /// <param name="where"></param>
        /// <param name="param"></param>
        /// <param name="orderby"></param>
        /// <returns></returns>       
        public sysdiagrams GetModel(string where,object param,string orderby = "")
        {
            StringBuilder query = new StringBuilder();
            query.Append(@" select * from sysdiagrams ");
            if(!string.IsNullOrEmpty(where))
            {
                query.Append(" where ");
                query.Append( where );
            }

            if(!string.IsNullOrEmpty(orderby))
            {
                query.Append(" order by " + orderby );
            }

            using (DbBase db = new DbBase())
            {
                return db.DbConnecttion.Query<sysdiagrams>(query.ToString(), param).SingleOrDefault();
            }
        }

        /// <summary>查询（多个）
        /// </summary>
        /// <param name="where"></param>
        /// <param name="param"></param>
        /// <param name="orderby"></param>
        /// <returns></returns>       
        public List<sysdiagrams> GetList(string where,object param,string orderby = "")
        {
            StringBuilder query = new StringBuilder();
            query.Append(@" select * from sysdiagrams ");
            if(!string.IsNullOrEmpty(where))
            {
                query.Append(" where ");
                query.Append( where );
            }

            if(!string.IsNullOrEmpty(orderby))
            {
                query.Append(" order by " + orderby );
            }

            using (DbBase db = new DbBase())
            {
                return db.DbConnecttion.Query<sysdiagrams>(query.ToString(), param).ToList();
            }
        }

        /// <summary>查询（所有）
        /// </summary>
        /// <returns></returns>       
        public List<sysdiagrams> GetALL()
        {
            StringBuilder query = new StringBuilder();
            query.Append(@" select * from sysdiagrams ");

            using (DbBase db = new DbBase())
            {
                return db.DbConnecttion.Query<sysdiagrams>(query.ToString()).ToList();
            }
        }
    }
}
